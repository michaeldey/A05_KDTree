package main;

/********************************************************
 *
 *  Project :  <A05 Kd Tree>
 *  File    :  <PointST.java>
 *  Name    :  <Ning Zhang, Michael Dey && Alfredo Rodriguez>
 *  Date    : <4/8/17>
 * 	Class	: CSIS 2420
 * 	Teacher	: Gene Riggs
 *	Description:	constructs a 2 dimensional pointer
 *
 ********************************************************/
import java.util.Iterator;

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.RedBlackBST;

public class PointST<Value> {
	
	private RedBlackBST<Point2D, Value> tree;
	
	/**
	 * constructor creates a new tree with 2D point and value
	 */
	public PointST() {
		tree = new RedBlackBST<Point2D, Value>();
		// construct an empty symbol table of points
	}
	
	/**
	 *
	 * @return check if the tree is empty
	 */
	public boolean isEmpty() {
		return tree.isEmpty();
		// is the symbol table empty?
	}
	
	/**
	 *
	 * @return the tree size
	 */
	public int size() {
		return tree.size();
		// number of points
	}
	
	/**
	 *
	 * @param p = point2D
	 * @param val = Value
	 */
	public void put(Point2D p, Value val) {
		if (p == null || val == null)
			throw new java.lang.NullPointerException();
		
		tree.put(p, val);
	}
	
	/**
	 *
	 * @param p = point2D
	 * @return value of Point2D you're looking for
	 */
	public Value get(Point2D p) {
		if (p == null)
			throw new java.lang.NullPointerException();
		return tree.get(p);
		// value associated with point p
	}
	
	/**
	 *
	 * @param p = Point2D
	 * @return true if the point is within the tree
	 */
	public boolean contains(Point2D p) {
		if (p == null)
			throw new java.lang.NullPointerException();
		return tree.contains(p);
		// does the symbol table contain point p?
	}
	
	/**
	 *
	 * @return true if the keys are within the tree
	 */
	public Iterable<Point2D> points() {
		return tree.keys();
		// all points in the symbol table
	}
	
	/**
	 *
	 * @param rect = RectHV
	 * @return returns all the points within that rectangle as a queue
	 */
	public Iterable<Point2D> range(RectHV rect) {
		
		if (rect == null)
			throw new java.lang.NullPointerException();
		
		//Creates a new Point2D queue
		Queue<Point2D> point2Dqueue = new Queue<>();
		
		//Iterates through all points in the RBST
		for (Point2D el : tree.keys())
			
			//If the point contained in the rectangle
			if (rect.contains(el))
				
				//Enqueue that point
				point2Dqueue.enqueue(el);
		
		return point2Dqueue;
		// all points that are inside the rectangle
	}
	
	/**
	 *
	 * @param p = Point2D
	 * @return returns the closest point to the given Point2D
	 */
	public Point2D nearest(Point2D p) {
		
		if (p == null)
			throw new java.lang.NullPointerException();
		
		//
		Point2D goal = null;
		double distancegoal = 0;
		
		//Iterate through RBST
		for (Point2D point : tree.keys()) {
			
			//Goal is null
			if (goal == null) {
				
				//Initializes point if there is none
				goal = point;
				//Calculates the distance between points
				distancegoal = point.distanceSquaredTo(p);
				
			} else if (point.distanceSquaredTo(p) < distancegoal) {
				
				//Set goal to point
				goal = point;
				//Calculates the distance between points
				distancegoal = point.distanceSquaredTo(p);
			}
		}
		return goal;
		
		// a nearest neighbor to point p; null if the symbol table is empty
	}
	
	public static void main(String[] args)
	{
		PointST test = new PointST();
		System.out.println("Test isEmpty(): " + test.isEmpty());
		
		Point2D myPoint = new Point2D(0.5, 0.75);
		Point2D myPoint2 = new Point2D(0.1, 0.2);
		
		//		   System.out.println(myPoint);
		test.put(myPoint, myPoint.toString());
		test.put(myPoint2, myPoint2.toString());
		
		System.out.println(test.get(myPoint));
		System.out.println(test.get(myPoint2));
		System.out.println();
		
		System.out.println(test.points().iterator().hasNext());
		
		for (Object m : test.points())
		{
			System.out.println(m);
		}
	}
	
}
